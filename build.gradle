import sun.misc.IOUtils

import java.util.zip.ZipEntry
import java.util.zip.ZipException
import java.util.zip.ZipFile
import java.util.zip.ZipOutputStream

buildscript {
    repositories {
        mavenCentral()
		jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

repositories {
	maven {
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name 'CB Maven FS'
        url "http://chickenbones.net/maven/"
    }
    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
	maven {
		url "http://dvs1.progwml6.com/files/maven"
    } 
	maven {
		url "http://maven.amadornes.com/"
	}
	maven {
        name = "forestry"
        url = "http://maven.ic2.player.to/"
    }
	maven {
		url "http://tehnut.info/maven"
	}
}

apply plugin: 'net.minecraftforge.gradle.forge'

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
    project.ext.mcVersion = config.minecraft_version
    String build = System.getenv("BUILD_NUMBER");
    project.ext.localBuild = build == null || build == ""
    project.ext.modVersion = "${config.mod_version}." + (ext.localBuild ? "localBuild" : build)
    project.ext.compatVer = config.compat_versions
}

version = modVersion
group= "elec332.core" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ElecCore"

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"
	
	replaceIn "main/ElecCore.java"
    replace "#ELECCORE_VER#", (config.mod_version+"."+(System.env.DRONE_BUILD_NUMBER ?: "9999.custom"))
	
	replaceIn "effects/api/ElecCoreAbilitiesAPIVersion.java"
    replace "#API_VER#", (config.abilityAPI_version)
	
	mappings = config.mappings
	
	useDepAts = true
}

dependencies {

	//WAILA
	//compile "mcp.mobius.waila:Waila:${config.WAILA_version}"
	//compile "mcp.mobius.waila:Waila:${config.WAILA_version}"//_${config.minecraft_version}"
	deobfCompile "mcp.mobius.waila:Hwyla:${config.WAILA_version}"
	
	//JEI
	deobfCompile "mezz.jei:jei_${config.minecraft_version}:${config.jei_version}"
	
	//MCMP
	//deobfCompile "MCMultiPart:MCMultiPart-experimental:${config.mcmp_version}:universal"
	
	//Forestry
	//deobfCompile "net.sengir.forestry:forestry_${config.minecraft_version}:${config.forestry_version}"
	deobfCompile "net.sengir.forestry:forestry_${config.forestry_version}"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", config.mod_version
    inputs.property "mcversion", config.minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':(config.mod_version+"."+(System.env.DRONE_BUILD_NUMBER ?: "9999.custom")), 'mcversion':config.minecraft_version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
         //'FMLCorePlugin': 'elec332.core.loader.ElecCoreLoader',
                   //'FMLCorePluginContainsFMLMod': 'true',
		attributes		   'FMLAT': 'eleccore_at.cfg'
	}
}

tasks.build.dependsOn('deobfJar')
//tasks.build.dependsOn('buildAbstraction')
//tasks.buildAbstraction.dependsOn('deobfjar')

task deobfJar(type: Jar) { // Generate deobfuscated
	//version = "Newest"
    from sourceSets.main.output
    classifier = 'deobf'
}

task buildAbstraction(type: MergeAbstraction) {
    dependsOn 'build'
    versions project.compatVer
    location project.localBuild ? "%p/libs/AbstractionLayer-%v.jar" : "%p/abstraction/AbstractionLayer-%v.jar"
}



class MergeAbstraction extends DefaultTask {

    String versions, location

    @TaskAction
    public void process() {
        if(versions == null || versions == ""){
            return
        }
        String[] q = versions.split(",");
        String projDir = project.buildFile.path.replace("build.gradle", "")
        String loc = location.replace("%p", projDir);
        String neen = projDir.substring(0, projDir.length() - 1);
        String[] slt = neen.split(new String(File.separatorChar, File.separatorChar))
        for(int i = 0; i < 5; i++){
            String fle = slt[0]+File.separator
            if (slt.length - i < 1){
                break
            }
            for (int j = 1; j < slt.length - i; j++) {
                fle += slt[j]+File.separator
            }
            loc.replace("%u"+i, fle)
        }
        for (String s in q) {
            println "Generating ElecCore for MC version: " + s
            String fL = loc.replace("%v", s);
            merge(new File(projDir, "build/libs/ElecCore-" + project.modVersion + "-deobf.jar"), new File(fL.replace(".jar", "-deobf.jar")), new File(projDir, "build/libs/ElecCore-" + project.mcVersion + "-" + project.modVersion + "-deobf.jar"))
            merge(new File(projDir, "build/libs/ElecCore-" + project.modVersion + ".jar"), new File(fL), new File(projDir, "build/libs/ElecCore-" + project.mcVersion + "-" + project.modVersion + ".jar"))
        }
    }

    private static void merge(File f1, File f2, File out){
        ZipFile abstracted = new ZipFile(f2)
        ZipFile deobf = new ZipFile(f1);
        if(out.exists()){
            out.delete()
        }
        ZipOutputStream abs = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(out)))
        for (ZipEntry ze in deobf.entries()){
            abs.putNextEntry ze
            abs.write(IOUtils.readFully(deobf.getInputStream(ze), -1, true))
        }
        for (ZipEntry ze in abstracted.entries()){
            try {
                abs.putNextEntry ze
                abs.write IOUtils.readFully(abstracted.getInputStream(ze), -1, true)
            } catch (ZipException e){
                if (!(ze.name.contains("META-INF") || ze.isDirectory())){
                    throw new RuntimeException(e);
                }
            }
        }
        abs.close()
    }

}
